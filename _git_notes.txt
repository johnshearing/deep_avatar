This directory named "lgt" corresponds to https://github.com/johnshearing/deep_avatar.git
Make all git commands from this directory not from the sub directories.

The following command shows where my backup remote repository currently exists:
(vrag_env) ~/lgt$ git remote -v
backup  https://github.com/johnshearing/deep_avatar.git (fetch)
backup  https://github.com/johnshearing/deep_avatar.git (push)


For more information about your remote repositories, issue the following commands:
git remote show backup


The following was the basic setup to make an online repository from this directory.
1. Create an empty online repository with whatever name you want.
   a. README.md and License files can be added later.

2. At the Bash console 
   Navigate to the top directory of the project using the "cd" command.
   For me the command is as folllows:
   cd lgt

   Remove the old git directory if it exists
   rm -rf .git

   If there are any .git directories in any of your subdirectories then these will not respond to git commands issued from the directory above.
   So delete any .git directories in your subdirectories if you wish to track those files from the repository above.
   cd <my subdirectory such as LightRAG or VideoRAG>
   rm -rf .git

   Navigate back to the top directory of the project using the "cd" command.
   For me the command is as folllows:
   cd lgt

   Initialize a new git repository after deleting the old.
   git init

   Rename the branch to "main":
   git branch -m main

   Create a selective .gitignore that ignores everything by default:
   echo "*" > .gitignore

   Take a look at the gitignore file as it currently exists to get an idea of what your gitignore files should look like.

   Stage and commit just these files:
   git add .gitignore
   git add -f <important_script.py> <specific_folder/specific_file.py>
   git commit -m "Initial commit with selected files only"


   Connect to your GitHub repository
   git remote add backup https://github.com/<your_account>/deep_avatar.git
   The following is an example of the command for my personal situation:
   git remote add backup https://github.com/johnshearing/deep_avatar.git

   Force push this clean state to GitHub:
   git push -f backup main

3. Now add the read me and the license to the online backup repository.

4. Then return to the bash console

   Pull the README.md and License files down to the local repository:
   git pull backup main

   Track the README and License files with the following commands, or just add the enteries to the gitignore file using a text editor
   Again, take a look at the gitignore file to see what it should look like.
   echo '!README.md' >> .gitignore
   echo '!LICENSE' >> .gitignore

   Gather files which are being tracked and have been changed to the stage to be committed.
   git add -A

   Commit the files to be tracked.
   git commit -m "Some comment here about the commit"

   Push the changes to the online repository:
   git push backup main



############## The commands is this section are used to merge the local and remote repositories ####################

It is best to push to or pull from the remote immediatly after doing work on either the remote or the local repository.
If both remote and local repositories are in the updated state at the same time then a merge will be required which is a pain.
Pulling updates from the remote is required before the git will allow pushing updates from the local repository.
If a merge becomes required then the following is the simplest procedure with the most control over the process.

******************** Important!! Commit all local changes before pulling from the remote ********************** 
********************             There will be tears if you fail to do this              ********************** 

If you want to see what changes are different between your local branch and the remote before deciding, you can run:
git fetch
git log --oneline --graph --decorate --all

Something like the following will be the output:
* aa55a8a (HEAD -> main) current work
| * 86b31b3 (backup/main) Update README.md
|/  
* 32de85a Update .gitignore
* 010fd12 clean history

From the above tree we see the following:
The local branch (HEAD -> main) has a commit "current work" that isn't on the remote
The remote branch (origin/main) has a commit "Update README.md" that isn't in the local repository

To keep local changes but also get the updated README.md from the remote, merge the remote changes into your local repository.
Pulling updates from the remote is required before the git will allow pushing updates from the local repository.

******************** Important!! Commit all local changes before pulling from the remote ********************** 
********************             There will be tears if you fail to do this              ********************** 

After committing local changes, go ahead and run the following commands to pull from the remote:
git config pull.rebase false
git pull backup main

The nano text editor will open automatically and it will be required to enter a commit messsage.
If nothing is entered then the pull and commit from the remote will be aborted.

If the pull from the remote is successful then it will be possible push updates from the local repository with the following command:
git push backup main



########################## The commands is this section are used to unstage files ###################################


********************                                 Important!!                         *****************************
***********git restore <filename> (without --staged): Discards unstaged changes in your working directory ************
******************************      Use the --staged option when using the restore command.     **********************
********************                    There will be tears if you fail to do this              ********************** 

If you've staged multiple files and want to unstage all of them at once, you can use git restore with the --staged option and a period (.) 
git restore --staged .

To unstage a single file run the following command:
git restore --staged my_file.txt